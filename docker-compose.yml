# ⚠️ DEVELOPMENT ENVIRONMENT - Docker Compose Configuration
# DO NOT use in production without proper secrets management

version: '3.8'

services:
  # Main application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restomod_app
    ports:
      - "5000:5000"
    environment:
      # ⚠️ DEVELOPMENT ENVIRONMENT - HARDCODED FOR CONVENIENCE
      NODE_ENV: development
      PORT: 5000

      # Database Configuration
      DB_TYPE: postgres
      DATABASE_URL: postgresql://restomod_user:DEV_PASSWORD_123@postgres:5432/restomod_dev
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: restomod_dev
      POSTGRES_USER: restomod_user
      POSTGRES_PASSWORD: DEV_PASSWORD_123
      POSTGRES_SSL: "false"

      # JWT Secret (⚠️ DEV ONLY)
      JWT_SECRET: dev_jwt_secret_change_in_production_1234567890

      # MCP Server API Keys
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}

      # Multi-Tool Scraper API Keys
      APIFY_API_KEY: ${APIFY_API_KEY:-}
      BRAVE_API_KEY: ${BRAVE_API_KEY:-}
      TAVILY_API_KEY: ${TAVILY_API_KEY:-}
      JINA_API_KEY: ${JINA_API_KEY:-}

      # Redis Configuration
      REDIS_URL: redis://redis:6379
    volumes:
      # Hot reload for development
      - ./client:/app/client
      - ./server:/app/server
      - ./shared:/app/shared
      - ./db:/app/db
      - ./data:/app/data
      - ./public:/app/public
      # Preserve node_modules
      - node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - restomod_network
    restart: unless-stopped
    command: npm run dev

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: restomod_postgres
    ports:
      - "5432:5432"
    environment:
      # ⚠️ DEVELOPMENT CREDENTIALS
      POSTGRES_DB: restomod_dev
      POSTGRES_USER: restomod_user
      POSTGRES_PASSWORD: DEV_PASSWORD_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - restomod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restomod_user -d restomod_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: restomod_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - restomod_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Scraper Service (batch processing)
  scraper:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restomod_scraper
    environment:
      # ⚠️ DEVELOPMENT ENVIRONMENT
      NODE_ENV: development

      # Database Configuration
      DATABASE_URL: postgresql://restomod_user:DEV_PASSWORD_123@postgres:5432/restomod_dev
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: restomod_dev
      POSTGRES_USER: restomod_user
      POSTGRES_PASSWORD: DEV_PASSWORD_123
      POSTGRES_SSL: "false"

      # Multi-Tool Scraper API Keys
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      APIFY_API_KEY: ${APIFY_API_KEY:-}
      BRAVE_API_KEY: ${BRAVE_API_KEY:-}
      TAVILY_API_KEY: ${TAVILY_API_KEY:-}
      JINA_API_KEY: ${JINA_API_KEY:-}

      # Redis Configuration
      REDIS_URL: redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./server/services:/app/server/services
    depends_on:
      - postgres
      - redis
    networks:
      - restomod_network
    restart: unless-stopped
    command: tail -f /dev/null  # Keep container running for manual job execution

  # pgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: restomod_pgadmin
    ports:
      - "5050:80"
    environment:
      # ⚠️ DEVELOPMENT CREDENTIALS
      PGADMIN_DEFAULT_EMAIL: admin@restomod.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - restomod_network
    restart: unless-stopped
    profiles:
      - tools  # Only starts with: docker-compose --profile tools up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  node_modules:
    driver: local

networks:
  restomod_network:
    driver: bridge
